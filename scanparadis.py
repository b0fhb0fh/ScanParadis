#!/usr/bin/python3

#
# ScanParadis v2.2 (with Nuclei)
#

import telebot
import subprocess
import re
from datetime import datetime
import json
import socket
import os, sys
import requests
import math
from telebot import util
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open("config.json", "r") as config_file:
        config = json.load(config_file)
except FileNotFoundError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    sys.exit(1)
except json.JSONDecodeError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
ZAP_PATH = config.get("ZAP_PATH", "/opt/ZAP_2.16.1/zap-2.16.1.jar")
OPENAI_API_KEY = config.get("OPENAI_API_KEY", "")
OPENAI_BASE_URL = config.get("OPENAI_BASE_URL", "https://api.proxyapi.ru/deepseek")
OPENAI_MODEL = config.get("OPENAI_MODEL", "deepseek-chat")
SCAN_RESULTS_DIR = config.get("SCAN_RESULTS_DIR", "scanresults")
EPSS_API_URL = config.get("EPSS_API_URL", "https://api.first.org/data/v1/epss")
NVD_API_URL = config.get("NVD_API_URL", "https://services.nvd.nist.gov/rest/json/cves/2.0")
EPSS_SIGNIFICANT_THRESHOLD = config.get("EPSS_SIGNIFICANT_THRESHOLD", 0.1)
NMAP_TIMEOUT = config.get("NMAP_TIMEOUT", 600)
ZAP_TIMEOUT = config.get("ZAP_TIMEOUT", 1800)
NUCLEI_TIMEOUT = config.get("NUCLEI_TIMEOUT", 1800)
ADVANCED_SCAN_TIMEOUT = config.get("ADVANCED_SCAN_TIMEOUT", 1200)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(SCAN_RESULTS_DIR, exist_ok=True)

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

scan_target = ''
menu_state = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
ai_client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url=OPENAI_BASE_URL,
)

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_main_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('Recon üïµÔ∏è')
    btn2 = KeyboardButton('Scan üîç')
    btn3 = KeyboardButton('Web üåê')
    btn4 = KeyboardButton('Others üìö')
    btn5 = KeyboardButton('/help')
    
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# –ú–µ–Ω—é Recon
def create_recon_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('nslookup')
    btn2 = KeyboardButton('whois')
    btn3 = KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    
    markup.add(btn1, btn2, btn3)
    return markup

# –ú–µ–Ω—é Scan
def create_scan_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('IPv4scan')
    btn2 = KeyboardButton('IPv6scan')
    btn3 = KeyboardButton('Vulners')
    btn4 = KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    
    markup.add(btn1, btn2, btn3, btn4)
    return markup

# –ú–µ–Ω—é Web
def create_web_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('wafcheck')
    btn2 = KeyboardButton('whatweb')
    btn3 = KeyboardButton('ZAP')
    btn4 = KeyboardButton('Nuclei')  
    btn5 = KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# –ú–µ–Ω—é Others
def create_others_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('creds')
    btn2 = KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    
    markup.add(btn1, btn2)
    return markup

@bot.message_handler(commands=['start', 'help'])
def handle_start(message):
    menu_state[message.chat.id] = 'main'
    bot.send_message(message.chat.id, "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª–µ–≥–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫", 
                    reply_markup=create_main_menu())
    print_help(message)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    chat_id = message.chat.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if message.text == 'Recon üïµÔ∏è':
        menu_state[chat_id] = 'recon'
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–≤–µ–¥–∫–∏:", reply_markup=create_recon_menu())
    elif message.text == 'Scan üîç':
        menu_state[chat_id] = 'scan'
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=create_scan_menu())
    elif message.text == 'Web üåê':
        menu_state[chat_id] = 'web'
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=create_web_menu())
    elif message.text == 'Others üìö':
        menu_state[chat_id] = 'others'
        bot.send_message(chat_id, "–î—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:", reply_markup=create_others_menu())
    elif message.text == '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è':
        menu_state[chat_id] = 'main'
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é Recon
    elif menu_state.get(chat_id) == 'recon':
        if message.text == 'nslookup':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ host.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "nslookup")
        elif message.text == 'whois':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ ip-–∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.1.1.1 –∏–ª–∏ 2a00:1450:4026:804::2004", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "whois")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é Scan
    elif menu_state.get(chat_id) == 'scan':
        if message.text == 'IPv4scan':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω IPv4 –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–¥–Ω–æ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.1.1.1 –∏–ª–∏ www.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "nmap4")
        elif message.text == 'IPv6scan':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω IPv6 –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–¥–Ω–æ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2a00:1450:4026:804::2004 –∏–ª–∏ www.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "nmap6")
        elif message.text == 'Vulners':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "vulners")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é Web
    elif menu_state.get(chat_id) == 'web':
        if message.text == 'wafcheck':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ url –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://www.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "wafw00f")
        elif message.text == 'whatweb':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ url –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://www.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "whatweb")
        elif message.text == 'ZAP':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ url –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://www.example.com –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ZAP", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "zap")
        elif message.text == 'Nuclei':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Nuclei (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com)", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "nuclei")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é Others
    elif menu_state.get(chat_id) == 'others':
        if message.text == 'creds':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞ –∏–ª–∏ –ü–û", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "creds")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    elif message.text == '/help':
        print_help(message)
    
    else:
        bot.send_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.", 
                        reply_markup=create_main_menu())

def get_target_and_run(message, proc="nslookup"):
    global scan_target
    # remove RCE tail and network mask  
    scan_target = message.text.strip().split(";")[0].split("|")[0].split("&")[0]

    if (check_target_ip_or_domain(scan_target) or check_target_url(scan_target) or proc == "creds"):
        run_utils(message, proc)
    else:
        bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                        reply_markup=create_main_menu())
        print_help(message)

def run_utils(message, proc):
    bot.send_message(message.chat.id, "–ü—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å...")
    
    if proc == "zap":
        run_zap_scan(message)
        return
    elif proc == "nuclei":  
        run_nuclei_scan(message)
        return
    elif proc == "vulners":
        run_vulners_scan(message)
        return
    
    commands = {
        "nmap4": ["/usr/bin/nmap", "-sS", "-F", scan_target],
        "nmap6": ["/usr/bin/nmap", "-sS", "-F", "-6", scan_target],
        "wafw00f": ["wafw00f", "-a", scan_target],
        "whatweb": ["whatweb", "--color=never", scan_target],
        "nslookup": ["host", scan_target],
        "whois": ["whois", scan_target],
        "creds": ["/opt/DefaultCreds-cheat-sheet/creds", "search", scan_target]
    }
    
    scan_result = subprocess.Popen(commands[proc], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    scan_output, scan_error = scan_result.communicate()
    scan_result.wait()
    
    # Find the relevant part of output for some commands
    i = 0
    if proc in ["nmap4", "nmap6"]:
        i = scan_output.find('Nmap scan')
    elif proc == "wafw00f":
        i = scan_output.find('Checking')
    
    splitted_text = util.smart_split(scan_output[i:], chars_per_string=3000)
    for text in splitted_text:
        bot.send_message(message.chat.id, text)

    print_log(message, scan_output)
    menu_state[message.chat.id] = 'main'
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=create_main_menu())

def run_vulners_scan(message):
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_target = re.sub(r'[^a-zA-Z0-9]', '_', scan_target)[:50]
        user_info = f"{message.from_user.id}_{message.from_user.username or 'unknown'}"
        report_filename = f"vulners_{safe_target}_{user_info}_{timestamp}.txt"
        report_path = os.path.join(SCAN_RESULTS_DIR, report_filename)

        bot.send_message(message.chat.id, "üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        # –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –ø–æ–∏—Å–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
        nmap_cmd = ["nmap", "-sS", "--open", "-Pn", scan_target]
        result = subprocess.run(nmap_cmd, capture_output=True, text=True, timeout=NMAP_TIMEOUT)
        
        if result.returncode != 0:
            raise Exception(f"Nmap error: {result.stderr}")
        
        open_ports = parse_open_ports(result.stdout)
        if not open_ports:
            bot.send_message(message.chat.id, "üîí –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            menu_state[message.chat.id] = 'main'
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=create_main_menu())
            return
        
        bot.send_message(message.chat.id, f"üìå –ù–∞–π–¥–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {', '.join(open_ports)}")
        bot.send_message(message.chat.id, "üî¨ –ü—Ä–æ–≤–æ–∂—É —É–≥–ª—É–±–ª—ë–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        
        # –í—Ç–æ—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        nmap_cmd = [
            "nmap", "-sS", "-p", ",".join(open_ports),
            "-sV", "--script", "vulners", scan_target
        ]
        
        result = subprocess.run(nmap_cmd, capture_output=True, text=True, timeout=ADVANCED_SCAN_TIMEOUT)
        
        if result.returncode != 0:
            raise Exception(f"Nmap error: {result.stderr}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        with open(report_path, "w") as f:
            f.write(result.stdout)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        cves = find_cves(result.stdout)
        if not cves:
            bot.send_message(message.chat.id, "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        else:
            risk_report = generate_risk_report(cves)
            splitted_text = util.smart_split(risk_report, chars_per_string=3000)
            for text in splitted_text:
                bot.send_message(message.chat.id, text)
        
    except subprocess.TimeoutExpired:
        error_msg = "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏"
        bot.send_message(message.chat.id, f"‚ö†Ô∏è {error_msg}")
        print_log(message, f"Vulners scan timeout: {error_msg}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        bot.send_message(message.chat.id, f"‚ö†Ô∏è {error_msg}")
        print_log(message, f"Vulners scan failed: {error_msg}")
    finally:
        menu_state[message.chat.id] = 'main'
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=create_main_menu())

def parse_open_ports(nmap_output: str) -> list:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏–∑ –≤—ã–≤–æ–¥–∞ nmap"""
    return list(set(re.findall(r'(\d+)/tcp\s+open', nmap_output)))

def find_cves(nmap_output: str) -> list:
    """–ò—â–µ—Ç CVE —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –≤—ã–≤–æ–¥–µ nmap"""
    return list(set(re.findall(r'CVE-\d{4}-\d{1,}', nmap_output)))

def get_epss_score(cve: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É EPSS –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.get(f"{EPSS_API_URL}?cve={cve}", timeout=10)
        if response.status_code == 200:
            data = response.json()['data'][0]
            return {
                'epss': float(data['epss']),
                'percentile': float(data['percentile'])
            }
    except Exception as e:
        print(f"EPSS request failed for {cve}: {str(e)}")
    return {'epss': 0.0, 'percentile': 0.0}

def get_cvss_data(cve: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ CVSS –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ NVD API"""
    try:
        response = requests.get(f"{NVD_API_URL}?cveId={cve}", timeout=10)
        if response.status_code == 200:
            data = response.json()
            vulnerabilities = data.get('vulnerabilities', [])
            if vulnerabilities:
                metrics = vulnerabilities[0]['cve'].get('metrics', {})
                if 'cvssMetricV31' in metrics:
                    cvss_metric = metrics['cvssMetricV31'][0]
                    return {
                        'version': '3.1',
                        'baseScore': cvss_metric['cvssData']['baseScore'],
                        'vector': cvss_metric['cvssData']['vectorString']
                    }
                elif 'cvssMetricV30' in metrics:
                    cvss_metric = metrics['cvssMetricV30'][0]
                    return {
                        'version': '3.0',
                        'baseScore': cvss_metric['cvssData']['baseScore'],
                        'vector': cvss_metric['cvssData']['vectorString']
                    }
    except Exception as e:
        print(f"NVD API request failed for {cve}: {str(e)}")
    return {'version': 'N/A', 'baseScore': 'N/A', 'vector': 'N/A'}

def generate_risk_report(cves: list) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–æ–≤"""
    report = ["*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:*\n"]
    total_multiplier = 1.0  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞
    vulnerabilities_data = []
    
    for cve in cves:
        epss_data = get_epss_score(cve)
        cvss_data = get_cvss_data(cve)
        
        vuln_info = (
            f"‚Ä¢ `{cve}`:\n"
            f"  - CVSS {cvss_data['version']}: {cvss_data['baseScore']} ({cvss_data['vector']})\n"
            f"  - EPSS: {epss_data['epss']:.4f}\n"
            f"  - Percentile: {epss_data['percentile']:.2f}"
        )
        vulnerabilities_data.append(vuln_info)
        
        if epss_data['epss'] > EPSS_SIGNIFICANT_THRESHOLD:
            risk_reduction = 1 - epss_data['epss']
            total_multiplier *= risk_reduction
    
    report.append("\n".join(vulnerabilities_data))
    
    if total_multiplier == 1.0:
        report.append("\n*–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∏—Å–∫–∞*")
    else:
        final_risk = 1 - total_multiplier
        report.append(
            f"\n*–û–ë–©–ò–ô –†–ò–°–ö –í–ó–õ–û–ú–ê:* {final_risk:.2%}\n"
            f"_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ä–∏—Å–∫ >50% —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è_"
        )
    
    return "\n".join(report)

def run_zap_scan(message):
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_url = re.sub(r'[^a-zA-Z0-9]', '_', scan_target)[:50]
        user_info = f"{message.from_user.id}_{message.from_user.username or 'unknown'}_{message.from_user.first_name or ''}_{message.from_user.last_name or ''}"
        report_filename = f"zap_{safe_url}_{user_info}_{timestamp}.json"
        report_path = os.path.join(SCAN_RESULTS_DIR, report_filename)

        bot.send_message(message.chat.id, "–ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ZAP. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ZAP —Å JSON-–æ—Ç—á–µ—Ç–æ–º
        zap_command = [
            "java", "-jar", ZAP_PATH,
            "-cmd",
            "-quickurl", scan_target,
            "-quickout", report_path
        ]
        
        process = subprocess.Popen(zap_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate(timeout=ZAP_TIMEOUT)
        
        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, zap_command, stderr)
        
        # –ß–∏—Ç–∞–µ–º JSON –æ—Ç—á–µ—Ç
        with open(report_path, "r") as report_file:
            zap_report = json.load(report_file)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        bot.send_message(message.chat.id, f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ñ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π AI-–æ—Ç—á–µ—Ç.")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –∞–Ω–∞–ª–∏–∑
        ai_report = ask_ai(json.dumps(zap_report, indent=2))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –æ—Ç—á–µ—Ç —á–∞—Å—Ç—è–º–∏
        splitted_text = util.smart_split(ai_report, chars_per_string=3000)
        for text in splitted_text:
            bot.send_message(message.chat.id, text)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        print_log(message, f"ZAP scan completed. Report: {report_filename}")
        
    except subprocess.CalledProcessError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ZAP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e.stderr}"
        bot.send_message(message.chat.id, error_msg)
        print_log(message, f"ZAP scan failed: {error_msg}")
    except json.JSONDecodeError as e:
        error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON –æ—Ç—á–µ—Ç–∞ ZAP"
        bot.send_message(message.chat.id, error_msg)
        print_log(message, f"JSON decode error: {str(e)}")
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        bot.send_message(message.chat.id, error_msg)
        print_log(message, f"Unexpected error: {str(e)}")
    finally:
        menu_state[message.chat.id] = 'main'
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=create_main_menu())

def run_nuclei_scan(message):
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_url = re.sub(r'[^a-zA-Z0-9]', '_', scan_target)[:50]
        user_info = f"{message.from_user.id}_{message.from_user.username or 'unknown'}"
        report_filename = f"nuclei_{safe_url}_{user_info}_{timestamp}.json"
        report_path = os.path.join(SCAN_RESULTS_DIR, report_filename)

        bot.send_message(message.chat.id, "üîç –ó–∞–ø—É—Å–∫–∞—é Nuclei —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        nuclei_cmd = [
            "nuclei",
            "-target", scan_target,
            "-t", "http/cves",
            "-t", "ssl",
            "-nc", 
            "-json-export", report_path
        ]
        
        process = subprocess.Popen(nuclei_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate(timeout=NUCLEI_TIMEOUT) 
        
        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, nuclei_cmd, stderr)
        
        # –ß–∏—Ç–∞–µ–º JSON –æ—Ç—á–µ—Ç
        with open(report_path, "r") as report_file:
            nuclei_report = report_file.read()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.send_message(message.chat.id, f"‚úÖ Nuclei —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç—á–µ—Ç
        ai_report = ask_ai(f"Nuclei scan report:\n{nuclei_report[:15000]}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
        for text in util.smart_split(ai_report, chars_per_string=3000):
            bot.send_message(message.chat.id, text)
            
    except subprocess.TimeoutExpired:
        error_msg = "Nuclei —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (1 —á–∞—Å)"
        bot.send_message(message.chat.id, f"‚ö†Ô∏è {error_msg}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ Nuclei —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        bot.send_message(message.chat.id, f"‚ö†Ô∏è {error_msg}")
    finally:
        menu_state[message.chat.id] = 'main'
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=create_main_menu())

def ask_ai(report_text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–í—ã–¥–µ–ª–∏:
1. –û—Å–Ω–æ–≤–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å –æ—Ü–µ–Ω–∫–æ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (High/Medium/Low)
2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏
3. –û–±—â—É—é –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.
–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
{report_text[:15000]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è API
"""
        response = ai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã —Å–∫–∞–Ω–µ—Ä–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=3000
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–æ—Ç—á–µ—Ç–∞: {str(e)}\n\n–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ñ–∞–π–ª–µ"

def check_target_url(target):
    result = re.match(r'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)', target)
    return bool(result)

def check_target_ip_or_domain(target):
    lookup = subprocess.run(["host", target], stdout=subprocess.PIPE, text=True).stdout
    addr = target.strip()
    return check_ip(addr) or str(lookup).find('not found') == -1

def check_ip(addr):
    try:
        socket.inet_pton(socket.AF_INET, addr)
        return True
    except socket.error:
        try:
            socket.inet_pton(socket.AF_INET6, addr)
            return True
        except socket.error:
            return False

def print_help(message):
    help_text = """
<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>
<code>Recon üïµÔ∏è</code> - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑–≤–µ–¥–∫–∏ (nslookup, whois)
<code>Scan üîç</code> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–π (IPv4, IPv6, Vulners)
<code>Web üåê</code> - –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (wafcheck, whatweb, ZAP)
<code>Others üìö</code> - –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (creds)

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
3. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML', reply_markup=create_main_menu())

def print_log(message, scan_output):
    with open('log.txt', 'a') as flog:
        flog.write(str(datetime.now()).split('.')[0] + '\n\n')
        flog.write('User ID:    ' + str(message.from_user.id) + '\n')
        flog.write('Username:   ' + str(message.from_user.username) + '\n')
        flog.write('First Name: ' + str(message.from_user.first_name) + '\n')
        flog.write('Last Name:  ' + str(message.from_user.last_name) + '\n')
        flog.write('Is Bot:     ' + str(message.from_user.is_bot) + '\n')
        flog.write('Language:   ' + str(message.from_user.language_code) + '\n')
        flog.write('Target:     ' + scan_target + '\n\n')
        flog.write(scan_output + '\n----------------------------------------------------------------------------------------------------\n\n')

try:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
except (ConnectionError, telebot.apihelper.ApiException) as e:
    sys.stdout.flush()
    os.execv(sys.argv[0], sys.argv)
else:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)