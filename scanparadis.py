#!/usr/bin/python3

#
# ScanParadis v1.20 (with hierarchical menu)
#

import telebot
import subprocess
import re
from datetime import datetime
import json
import socket
import os, sys
from telebot import util
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open("config.json", "r") as config_file:
        config = json.load(config_file)
except FileNotFoundError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    sys.exit(1)
except json.JSONDecodeError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

scan_target = ''
menu_state = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_main_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('Recon üïµÔ∏è')
    btn2 = KeyboardButton('Scan üîç')
    btn3 = KeyboardButton('Web üåê')
    btn4 = KeyboardButton('Others üìö')
    btn5 = KeyboardButton('/help')
    
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup

# –ú–µ–Ω—é Recon
def create_recon_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('nslookup')
    btn2 = KeyboardButton('whois')
    btn3 = KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    
    markup.add(btn1, btn2, btn3)
    return markup

# –ú–µ–Ω—é Scan
def create_scan_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('IPv4scan')
    btn2 = KeyboardButton('IPv6scan')
    btn3 = KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    
    markup.add(btn1, btn2, btn3)
    return markup

# –ú–µ–Ω—é Web
def create_web_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('wafcheck')
    btn2 = KeyboardButton('whatweb')
    btn3 = KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    
    markup.add(btn1, btn2, btn3)
    return markup

# –ú–µ–Ω—é Others
def create_others_menu():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    
    btn1 = KeyboardButton('creds')
    btn2 = KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
    
    markup.add(btn1, btn2)
    return markup

@bot.message_handler(commands=['start', 'help'])
def handle_start(message):
    menu_state[message.chat.id] = 'main'
    bot.send_message(message.chat.id, "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª–µ–≥–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫", 
                    reply_markup=create_main_menu())
    print_help(message)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    chat_id = message.chat.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if message.text == 'Recon üïµÔ∏è':
        menu_state[chat_id] = 'recon'
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–≤–µ–¥–∫–∏:", reply_markup=create_recon_menu())
    elif message.text == 'Scan üîç':
        menu_state[chat_id] = 'scan'
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=create_scan_menu())
    elif message.text == 'Web üåê':
        menu_state[chat_id] = 'web'
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=create_web_menu())
    elif message.text == 'Others üìö':
        menu_state[chat_id] = 'others'
        bot.send_message(chat_id, "–î—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:", reply_markup=create_others_menu())
    elif message.text == '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è':
        menu_state[chat_id] = 'main'
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é Recon
    elif menu_state.get(chat_id) == 'recon':
        if message.text == 'nslookup':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ host.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "nslookup")
        elif message.text == 'whois':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ ip-–∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.1.1.1 –∏–ª–∏ 2a00:1450:4026:804::2004", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "whois")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é Scan
    elif menu_state.get(chat_id) == 'scan':
        if message.text == 'IPv4scan':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω IPv4 –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–¥–Ω–æ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.1.1.1 –∏–ª–∏ www.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "nmap4")
        elif message.text == 'IPv6scan':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω IPv6 –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–¥–Ω–æ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2a00:1450:4026:804::2004 –∏–ª–∏ www.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "nmap6")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é Web
    elif menu_state.get(chat_id) == 'web':
        if message.text == 'wafcheck':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ url –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://www.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "wafw00f")
        elif message.text == 'whatweb':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ url –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://www.example.com", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "whatweb")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é Others
    elif menu_state.get(chat_id) == 'others':
        if message.text == 'creds':
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞ –∏–ª–∏ –ü–û", 
                            reply_markup=ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_target_and_run, "creds")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    elif message.text == '/help':
        print_help(message)
    
    else:
        bot.send_message(chat_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help.", 
                        reply_markup=create_main_menu())

def get_target_and_run(message, proc="nslookup"):
    global scan_target
    # remove RCE tail and network mask  
    scan_target = message.text.strip().split(";")[0].split("|")[0].split("&")[0]

    if (check_target_ip_or_domain(scan_target) or check_target_url(scan_target) or proc == "creds"):
        run_utils(message, proc)
    else:
        bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                        reply_markup=create_main_menu())
        print_help(message)

def run_utils(message, proc):
    bot.send_message(message.chat.id, "–ü—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å...")
    
    commands = {
        "nmap4": ["/usr/bin/nmap", "-sS", "-F", scan_target],
        "nmap6": ["/usr/bin/nmap", "-sS", "-F", "-6", scan_target],
        "wafw00f": ["wafw00f", "-a", scan_target],
        "whatweb": ["whatweb", "--color=never", scan_target],
        "nslookup": ["host", scan_target],
        "whois": ["whois", scan_target],
        "creds": ["/opt/DefaultCreds-cheat-sheet/creds", "search", scan_target]
    }
    
    scan_result = subprocess.Popen(commands[proc], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    scan_output, scan_error = scan_result.communicate()
    scan_result.wait()
    
    # Find the relevant part of output for some commands
    i = 0
    if proc in ["nmap4", "nmap6"]:
        i = scan_output.find('Nmap scan')
    elif proc == "wafw00f":
        i = scan_output.find('Checking')
    
    splitted_text = util.smart_split(scan_output[i:], chars_per_string=3000)
    for text in splitted_text:
        bot.send_message(message.chat.id, text)

    print_log(message, scan_output)
    menu_state[message.chat.id] = 'main'
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=create_main_menu())

def check_target_url(target):
    result = re.match(r'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)', target)
    return bool(result)

def check_target_ip_or_domain(target):
    lookup = subprocess.run(["host", target], stdout=subprocess.PIPE, text=True).stdout
    addr = target.strip()
    return check_ip(addr) or str(lookup).find('not found') == -1

def check_ip(addr):
    try:
        socket.inet_pton(socket.AF_INET, addr)
        return True
    except socket.error:
        try:
            socket.inet_pton(socket.AF_INET6, addr)
            return True
        except socket.error:
            return False

def print_help(message):
    help_text = """
<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>
<code>Recon üïµÔ∏è</code> - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑–≤–µ–¥–∫–∏ (nslookup, whois)
<code>Scan üîç</code> - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–π (IPv4, IPv6)
<code>Web üåê</code> - –≤–µ–±-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (wafcheck, whatweb)
<code>Others üìö</code> - –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (creds)

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
3. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML', reply_markup=create_main_menu())

def print_log(message, scan_output):
    with open('log.txt', 'a') as flog:
        flog.write(str(datetime.now()).split('.')[0] + '\n\n')
        flog.write('User ID:    ' + str(message.from_user.id) + '\n')
        flog.write('Username:   ' + str(message.from_user.username) + '\n')
        flog.write('First Name: ' + str(message.from_user.first_name) + '\n')
        flog.write('Last Name:  ' + str(message.from_user.last_name) + '\n')
        flog.write('Is Bot:     ' + str(message.from_user.is_bot) + '\n')
        flog.write('Language:   ' + str(message.from_user.language_code) + '\n')
        flog.write('Target:     ' + scan_target + '\n\n')
        flog.write(scan_output + '\n----------------------------------------------------------------------------------------------------\n\n')

try:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
except (ConnectionError, telebot.apihelper.ApiException) as e:
    sys.stdout.flush()
    os.execv(sys.argv[0], sys.argv)
else:
    bot.infinity_polling(timeout=10, long_polling_timeout=5)